name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Arc ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-binaries:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: arc-linux-x86_64
            cc: gcc
          - os: macos-latest
            asset_name: arc-macos-x86_64
            cc: clang
          - os: windows-latest
            asset_name: arc-windows-x86_64.exe
            cc: cl
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-14-dev libllvm14
    
    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install llvm
    
    - name: Install LLVM (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install llvm
    
    - name: Build Release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release compiler/
        cmake --build build --config Release --parallel
    
    - name: Package Binary
      run: |
        cp build/arc ${{ matrix.asset_name }}
      shell: bash
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream